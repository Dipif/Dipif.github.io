I"<p>종만북을 보면서 알고리즘 공부를 하였다.
balanced tree중 구현하기 쉽다는 트립과 세그먼트 트리, 그리고 펜윅 트리를 배웠다.</p>

<p>트립은 노드를 좌우로 크기에 따라 정렬하는 것 뿐만이 아니라 각 노드에 난수로 우선순위를 부여하여
 위에서 아래로 그 우선순위에 따라서 또 배열한다. 소수 판별에 난수를 사용하는 알고리즘을 본 적은 있지만
자료구조에 난수라니 대단한 아이디어다.
그런데 이게 노드를 추가하고 삭제하는 과정이 영 이해가 안가서.. 추후에 더 이해한 후에 따로 포스트를 해 봐야겠다.</p>

<p>세그먼트 트리는 어떤 배열이 있을 때 그 구간을 반으로 쪼개서 좌우 자식노드로 붙이고 다시 반쪽 구간들을 반토막 내서
자식의 자식으로 붙이고.. 이렇게 해서 log n 높이의 트리를 만드는 것이다. 그리고 구하고자 하는 값을 트리의 노드들이 나타내는
구간들에 대해 미리 구해놓고, 임의의 [a:b]에 대해 그 구간들을 합병하여 결과값을 구한다. 이 방법의 장점으로는 한번 트리의 노드들에 값을
구해 놓으면 여러 [a:b]들에 대해 O(log n)의 시간으로 결과값을 구하게 해준다는 점이 있고, 배열에 어떤 값이 변하더라도 그 변화를
결과에 반영하는데 O(log n)의 시간밖에 걸리지 않는 다는 점 또한 있다.</p>

<p>펜윅 트리는 세그먼트 트리의 특수한 형태인데, 세그먼트 트리를 사용해 구간합을 구하기 위해 필요없는 정보는 전부 삭제한 것이다.
 그런데 그 형태가 어찌나 정교한지, 비트마스킹으로 인덱스를 옮겨다니는건 기가 막힌다. 구간합을 구하는 건 그냥 부분합을 구하는걸로 
 충분하지 않은가 생각할 수 있지만, 펜윅 트리도 세그먼트 트리와 마찬가지로 배열의 값이 변경됐을 때 그걸 반영하는데 O(log n)의 
 시간밖에 걸리지 않는다는 장점이 있다.</p>
:ET