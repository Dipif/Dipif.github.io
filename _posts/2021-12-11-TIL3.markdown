---
layout: post
read_time: true
show_date: true
title:  TIL 3
date:   2021-12-11 01:35
tags: [Til]
author: 이대겸
github:  
mathjax: yes
---

오늘 강의에서 dfs를 stack을 이용해서 구현하는 걸 보았다. 정점 탐색이 아니라 간선 탐색이라 조금은 다르긴 하겠지만 
일반적인 dfs의 경우에도 비슷하게 구현할 수 있을 것이다. 사실 함수 호출이 다 스택 영역에서 이루어 지는 만큼 그를 응용하면
구현할 수 있는 건 당연하겠지만, 생각했던 것보다 훨씬 간단해서 알아두면 활용할 데가 많을 것 같았다. 안그래도 
개인적으로 재귀에 대해 구현은 보기 좋으나 비효율적인 면이 있어 싫어하는데 앞으로 재귀 문제에선 전부 stack구현을 시도해봐야겠다.

한편 이번 강의에서 하필 stack을 사용한 이유는 정점의 갯수가 최대 1만개까지 가기 때문으로 보인다.
파이썬은 재귀 횟수에 1000의 제한이 있고, C++은 Visual studio 기준으로 1mb의 stack memory 제한이 있다.
이를 해제하는 방법은 있으나, 제한에는 나름의 이유가 있을 것이다. 이에 관한 내용을 <A href="https://stackoverflow.com/questions/10482974/why-is-stack-memory-size-so-limited">
다음 스택 오버플로우 링크 </A>에서 확인할 수 있었다.

첫번째 답변에선 "32bit 프로그램은 2gb의 가상공간을 가질 수 있고 이 때 stack size가 2mb라면 1024개의 threads를 가질 수
있다(각 thread는 thread stack이라고 부르는 고유의 stack을 가진다고 한다). web server 같은 경우엔 stack size를
100mb까지 늘리고 20개의 thread만 가져도 충분할 수 있지만, 아주 간단한 gui 프로그램이라도 이는 부족하다" 고 하였으며

두번째 답변에선 "C 또는 C++에서 stack overflow가 일어나는 경우는 거의 에러가 원인이기 때문에, 제한된 stack size는 
에러 감지 및 방지를 위해 사용된다" 고 하였다.

둘 다 꽤나 역사가 담긴 답변이다.

